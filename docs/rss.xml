<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://qigaowei.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://qigaowei.github.io</link></image><lastBuildDate>Wed, 17 Jul 2024 06:52:38 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>采用AIGC，如通义千问，生成建表sql</title><link>https://qigaowei.github.io/post/cai-yong-AIGC%EF%BC%8C-ru-tong-yi-qian-wen-%EF%BC%8C-sheng-cheng-jian-biao-sql.html</link><description>###通过原型图生成oracle表sql和备注，&#13;
###对于字段比较多的表，&#13;
###节省时间20分钟以上。</description><guid isPermaLink="true">https://qigaowei.github.io/post/cai-yong-AIGC%EF%BC%8C-ru-tong-yi-qian-wen-%EF%BC%8C-sheng-cheng-jian-biao-sql.html</guid><pubDate>Wed, 17 Jul 2024 06:51:38 +0000</pubDate></item><item><title>采用idea的JRebel插件，一键更新本地代码，不用重启SpringBoot,每次可以节省几分钟</title><link>https://qigaowei.github.io/post/cai-yong-idea-de-JRebel-cha-jian-%EF%BC%8C-yi-jian-geng-xin-ben-di-dai-ma-%EF%BC%8C-bu-yong-zhong-qi-SpringBoot%2C-mei-ci-ke-yi-jie-sheng-ji-fen-zhong.html</link><description>###采用idea的JRebel插件，###一键更新本地代码，###不用重启SpringBoot,###每次可以节省几分钟。</description><guid isPermaLink="true">https://qigaowei.github.io/post/cai-yong-idea-de-JRebel-cha-jian-%EF%BC%8C-yi-jian-geng-xin-ben-di-dai-ma-%EF%BC%8C-bu-yong-zhong-qi-SpringBoot%2C-mei-ci-ke-yi-jie-sheng-ji-fen-zhong.html</guid><pubDate>Wed, 17 Jul 2024 06:49:57 +0000</pubDate></item><item><title>Mybatis union 循环</title><link>https://qigaowei.github.io/post/Mybatis%20union%20-xun-huan.html</link><description>	```&#13;
&lt;foreach collection='nameList' item='name' separator='union'&gt;&#13;
		select id  from table where name = #{name}&#13;
	&lt;/foreach&gt;&#13;
```&#13;
   ``` &#13;
   List&lt;Object&gt; getList(@Param('nameList')String[] nameList);  &#13;
```&#13;
###优化接口，使用union，&#13;
###加上索引，提高接口响应速度&#13;
###in有数量限制，可能不走索引&#13;
###EXISTS也可以，但是union的写法最简单。</description><guid isPermaLink="true">https://qigaowei.github.io/post/Mybatis%20union%20-xun-huan.html</guid><pubDate>Wed, 17 Jul 2024 06:49:26 +0000</pubDate></item><item><title>springboot过滤器</title><link>https://qigaowei.github.io/post/springboot-guo-lv-qi.html</link><description>```&#13;
package com.abc.bigdata.riskmanagement.filter;&#13;
&#13;
import lombok.extern.slf4j.Slf4j;&#13;
import org.apache.skywalking.apm.toolkit.trace.TraceContext;&#13;
import org.springframework.web.filter.OncePerRequestFilter;&#13;
&#13;
import javax.servlet.FilterChain;&#13;
import javax.servlet.ServletException;&#13;
import javax.servlet.annotation.WebFilter;&#13;
import javax.servlet.http.HttpServletRequest;&#13;
import javax.servlet.http.HttpServletResponse;&#13;
import java.io.IOException;&#13;
&#13;
@Slf4j&#13;
@WebFilter(filterName = 'thirdFilter',urlPatterns = {'/value/tycCompanyBase'&#13;
})&#13;
public class ThirdFilter extends OncePerRequestFilter {&#13;
&#13;
    @Override&#13;
    protected void doFilterInternal(HttpServletRequest request,&#13;
                                    HttpServletResponse response,&#13;
                                    FilterChain chain) throws IOException, ServletException {&#13;
        String url=request.getServletPath();&#13;
        String traceId= TraceContext.traceId();&#13;
        log.error(url+traceId);&#13;
        chain.doFilter(request, response);&#13;
    }&#13;
&#13;
}&#13;
```&#13;
&#13;
### springboot启动类要加入注解&#13;
```&#13;
@ServletComponentScan(basePackages = {'com.abc.bigdata.riskmanagement.filter'})&#13;
```&#13;
&#13;
### 过滤器注册为@Component导致urlPatterns不生效&#13;
&#13;
。</description><guid isPermaLink="true">https://qigaowei.github.io/post/springboot-guo-lv-qi.html</guid><pubDate>Wed, 17 Jul 2024 06:36:05 +0000</pubDate></item><item><title>Feign绕过SSL验证的方案，Feign调用https接口，亲测可用，引入包非常少，非常简单</title><link>https://qigaowei.github.io/post/Feign-rao-guo-SSL-yan-zheng-de-fang-an-%EF%BC%8CFeign-diao-yong-https-jie-kou-%EF%BC%8C-qin-ce-ke-yong-%EF%BC%8C-yin-ru-bao-fei-chang-shao-%EF%BC%8C-fei-chang-jian-dan.html</link><description>```&#13;
import feign.Client;&#13;
import feign.Feign;&#13;
import org.apache.http.conn.ssl.NoopHostnameVerifier;&#13;
import org.springframework.context.annotation.Bean;&#13;
import org.springframework.context.annotation.Configuration;&#13;
&#13;
import javax.net.ssl.*;&#13;
&#13;
/**&#13;
 * Feign配置，使其支持https&#13;
 */&#13;
@Configuration&#13;
public class FeignConfiguration {&#13;
&#13;
    @Bean&#13;
    public Feign.Builder feignBuilder() {&#13;
        final Client trustSSLSockets = client();&#13;
        return Feign.builder().client(trustSSLSockets);&#13;
    }&#13;
&#13;
    public static SSLSocketFactory feignTrustingSSLSocketFactory = null;&#13;
&#13;
    @Bean&#13;
    public Client client() {&#13;
        if(feignTrustingSSLSocketFactory==null){&#13;
            try {&#13;
                feignTrustingSSLSocketFactory = getFeignTrustingSSLSocketFactory();&#13;
            } catch (Exception e) {&#13;
                e.printStackTrace();&#13;
            }&#13;
        }&#13;
        Client client= new Client.Default(feignTrustingSSLSocketFactory, new NoopHostnameVerifier());&#13;
        return client;&#13;
    }&#13;
&#13;
    public static SSLSocketFactory getFeignTrustingSSLSocketFactory() throws Exception {&#13;
        javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[1];&#13;
        javax.net.ssl.TrustManager tm = new miTM();&#13;
        trustAllCerts[0] = tm;&#13;
        javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance('SSL');&#13;
        sc.init(null, trustAllCerts, null);&#13;
        return sc.getSocketFactory();&#13;
    }&#13;
    static class miTM implements javax.net.ssl.TrustManager, javax.net.ssl.X509TrustManager {&#13;
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {&#13;
            return null;&#13;
        }&#13;
&#13;
        public boolean isServerTrusted(java.security.cert.X509Certificate[] certs) {&#13;
            return true;&#13;
        }&#13;
&#13;
        public boolean isClientTrusted(java.security.cert.X509Certificate[] certs) {&#13;
            return true;&#13;
        }&#13;
&#13;
        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType)&#13;
                throws java.security.cert.CertificateException {&#13;
            return;&#13;
        }&#13;
&#13;
        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType)&#13;
                throws java.security.cert.CertificateException {&#13;
            return;&#13;
        }&#13;
    }&#13;
&#13;
}&#13;
```&#13;
```&#13;
  &lt;dependency&gt;&#13;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#13;
            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&#13;
        &lt;/dependency&gt;&#13;
&lt;dependency&gt;&#13;
            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;&#13;
            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;&#13;
            &lt;version&gt;4.5.13&lt;/version&gt;&#13;
        &lt;/dependency&gt;&#13;
```&#13;
```&#13;
@Component&#13;
@FeignClient(name = 'NgfwApiFeign', url = 'https://fakeAIMASKurl', configuration = FeignConfiguration.class)&#13;
public interface NgfwApiFeign {&#13;
```。</description><guid isPermaLink="true">https://qigaowei.github.io/post/Feign-rao-guo-SSL-yan-zheng-de-fang-an-%EF%BC%8CFeign-diao-yong-https-jie-kou-%EF%BC%8C-qin-ce-ke-yong-%EF%BC%8C-yin-ru-bao-fei-chang-shao-%EF%BC%8C-fei-chang-jian-dan.html</guid><pubDate>Wed, 17 Jul 2024 06:35:36 +0000</pubDate></item><item><title>mysql自定义排序</title><link>https://qigaowei.github.io/post/mysql-zi-ding-yi-pai-xu.html</link><description>```&#13;
CREATE TABLE `partner_company` (&#13;
  `id` int unsigned NOT NULL AUTO_INCREMENT COMMENT '数据库主键',&#13;
  `model_credit_grade` varchar(32) DEFAULT NULL COMMENT '最近一次模型结果信用评级',&#13;
  PRIMARY KEY (`id`)&#13;
) ENGINE=InnoDB AUTO_INCREMENT=2669 DEFAULT CHARSET=utf8mb3;&#13;
```&#13;
```&#13;
INSERT INTO `partner_company` (`id`, `model_credit_grade`) VALUES ('1', 'AAA');&#13;
INSERT INTO `partner_company` (`id`, `model_credit_grade`) VALUES ('2', 'AA');&#13;
INSERT INTO `partner_company` (`id`, `model_credit_grade`) VALUES ('3', 'A');&#13;
INSERT INTO `partner_company` (`id`, `model_credit_grade`) VALUES ('4', 'BBB');&#13;
INSERT INTO `partner_company` (`id`, `model_credit_grade`) VALUES ('5', 'BB');&#13;
INSERT INTO `partner_company` (`id`, `model_credit_grade`) VALUES ('6', 'B');&#13;
INSERT INTO `partner_company` (`id`, `model_credit_grade`) VALUES ('7', NULL);&#13;
```&#13;
下面sql为null值排最后&#13;
&#13;
&#13;
&#13;
```&#13;
SELECT&#13;
	model_credit_grade&#13;
FROM&#13;
	partner_company&#13;
ORDER BY&#13;
	ISNULL(model_credit_grade) || model_credit_grade = '',&#13;
	field(&#13;
		model_credit_grade,&#13;
		'AAA',&#13;
		'AA',&#13;
		'A',&#13;
		'BBB',&#13;
		'BB',&#13;
		'B',&#13;
		''&#13;
	)&#13;
```&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/70b4603a5d63459091cb27a51b29d470.png)&#13;
&#13;
&#13;
	下面sql为null值排最前&#13;
&#13;
```&#13;
SELECT&#13;
	model_credit_grade&#13;
FROM&#13;
	partner_company&#13;
ORDER BY&#13;
	field(&#13;
		model_credit_grade,&#13;
		'',&#13;
		'B',&#13;
		'BB',&#13;
		'BBB',&#13;
		'A',&#13;
		'AA',&#13;
		'AAA'&#13;
	),&#13;
	ISNULL(model_credit_grade) || model_credit_grade = ''&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
![在这里插入图片描述](https://img-blog.csdnimg.cn/6be349d2deac436d87c5108608d30179.png)。</description><guid isPermaLink="true">https://qigaowei.github.io/post/mysql-zi-ding-yi-pai-xu.html</guid><pubDate>Wed, 17 Jul 2024 06:35:07 +0000</pubDate></item><item><title>将子网转为ip范围</title><link>https://qigaowei.github.io/post/jiang-zi-wang-zhuan-wei-ip-fan-wei.html</link><description>```&#13;
&lt;dependency&gt;&#13;
            &lt;groupId&gt;commons-net&lt;/groupId&gt;&#13;
            &lt;artifactId&gt;commons-net&lt;/artifactId&gt;&#13;
            &lt;version&gt;3.6&lt;/version&gt;&#13;
        &lt;/dependency&gt;&#13;
```&#13;
&#13;
```&#13;
          private static List&lt;String&gt; cidrToIpList(String cidr){&#13;
        SubnetUtils utils = new SubnetUtils(cidr);&#13;
        String[] adress = utils.getInfo().getAllAddresses();&#13;
        return Arrays.asList(adress);&#13;
    }&#13;
```。</description><guid isPermaLink="true">https://qigaowei.github.io/post/jiang-zi-wang-zhuan-wei-ip-fan-wei.html</guid><pubDate>Wed, 17 Jul 2024 06:34:46 +0000</pubDate></item><item><title>git强制回滚</title><link>https://qigaowei.github.io/post/git-qiang-zhi-hui-gun.html</link><description>```&#13;
git reset --hard 4586e7b93cf81db1fe421bd52fdbf6371fd207d3&#13;
git push -f&#13;
```。</description><guid isPermaLink="true">https://qigaowei.github.io/post/git-qiang-zhi-hui-gun.html</guid><pubDate>Wed, 17 Jul 2024 06:34:20 +0000</pubDate></item><item><title>从List删除元素，需要注意的点</title><link>https://qigaowei.github.io/post/cong-List-shan-chu-yuan-su-%EF%BC%8C-xu-yao-zhu-yi-de-dian.html</link><description>```java&#13;
     List&lt;String&gt; list=new ArrayList&lt;String&gt;();&#13;
        list.add('1');&#13;
        list.add('2');&#13;
        list.add('3');&#13;
        list.add('4');&#13;
        for(String str : list){&#13;
            if('3'.equals(str)){&#13;
                list.remove(str);&#13;
            }&#13;
            System.out.println(str);//代表业务逻辑&#13;
        }&#13;
        System.out.println();&#13;
        for(String str : list){&#13;
            System.out.println(str);&#13;
        }&#13;
```&#13;
结果如下，第一个for循环，4没有打印出来需要注意&#13;
1&#13;
2&#13;
3&#13;
&#13;
1&#13;
2&#13;
4&#13;
。</description><guid isPermaLink="true">https://qigaowei.github.io/post/cong-List-shan-chu-yuan-su-%EF%BC%8C-xu-yao-zhu-yi-de-dian.html</guid><pubDate>Wed, 17 Jul 2024 06:33:53 +0000</pubDate></item><item><title>git从主干拉取新分支</title><link>https://qigaowei.github.io/post/git-cong-zhu-gan-la-qu-xin-fen-zhi.html</link><description>```&#13;
git checkout master&#13;
git checkout -b enterprise1.2.1&#13;
git push origin enterprise1.2.1:enterprise1.2.1&#13;
```。</description><guid isPermaLink="true">https://qigaowei.github.io/post/git-cong-zhu-gan-la-qu-xin-fen-zhi.html</guid><pubDate>Wed, 17 Jul 2024 06:32:51 +0000</pubDate></item><item><title>swagger不支持泛型返回值的解决方法</title><link>https://qigaowei.github.io/post/swagger-bu-zhi-chi-fan-xing-fan-hui-zhi-de-jie-jue-fang-fa.html</link><description>#### 公司使用apifox给前端提供接口文档，&#13;
#### 我先通过http://localhost:9604/v2/api-docs导出swagger的json格式，&#13;
#### 然后再导入到apifox，&#13;
#### 结果接口返回值的泛型里面的字段不显示。</description><guid isPermaLink="true">https://qigaowei.github.io/post/swagger-bu-zhi-chi-fan-xing-fan-hui-zhi-de-jie-jue-fang-fa.html</guid><pubDate>Wed, 17 Jul 2024 06:32:13 +0000</pubDate></item><item><title>小七的博客</title><link>https://qigaowei.github.io/post/xiao-qi-de-bo-ke.html</link><description>小七的博客。</description><guid isPermaLink="true">https://qigaowei.github.io/post/xiao-qi-de-bo-ke.html</guid><pubDate>Wed, 17 Jul 2024 06:25:59 +0000</pubDate></item></channel></rss>